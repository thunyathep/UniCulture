import 'dart:convert';

import 'package:unihr/core/feature/profile/user/domain/entity/all_user_profile_entity.dart';

List<AllProfileModel> allprofileFromJson(String str) =>
    List<AllProfileModel>.from(json.decode(str).map((x) =>
        AllProfileModel.fromJson(x)));

String AllProfileModelToJson(List<AllProfileModel> data)
=> json.encode(List<dynamic>.from(data.map((x) => x.toJson())));

class AllProfileModel extends AllProfileEntity{

  const AllProfileModel({
    required int? idEmployees,
    required String? employeeId,
    required String? titleTh,
    required String? firstnameTh,
    required String? lastnameTh,
    required String? nicknameTh,
    required String? titleEn,
    required DateTime? hiringDate,
    required String? personalId,
    required String? email,
    required String? telephoneMobile,
    required String? positionName,
    required String? sectionName,
    required String? departmentName,
    required dynamic divisionName,
    required String? address,
    required String? houseNo,
    required dynamic village,
    required String? villageNo,
    required dynamic alley,
    required dynamic road,
    required String? subDistrict,
    required String? district,
    required String? provience,
    required String? areaCode,
    required String? companyName,
    required String? firstnameEn,
    required String? lastnameEn,
    required dynamic nicknameEn,
    required int? idRole,
    required int? isActive,
    required DateTime? createDate,
    required dynamic createBy,
    required int? idPaymentType,
    required int? idCompany,
    required String? imageName,
    required int? servY,
    required int? servM,
    required int? userPf,
    required String? taxId,
    required String? maritalStatus,
    required int? idManagerLv1,
    required String? managerLv1FirstnameTh,
    required String? managerLv1LastnameTh,
    required String? managerLv1FirstnameEn,
    required String? managerLv1LastnameEn,
    required String? managerLv1Email,
    required int? idManagerLv2,
    required String? managerLv2FirstnameTh,
    required String? managerLv2LastnameTh,
    required String? managerLv2FirstnameEn,
    required String? managerLv2LastnameEn,
    required String? managerLv2Email,
    required String? managerLv1PositionName,
    required String? managerLv2PositionName,
    required String? emergencyContact,
    required String? emergencyRelationship,
    required String? emergencyPhone,
    required DateTime? birthday,
    required String? workingType,
    required DateTime? updateDate,
    required int? updateBy,
    required String? roleName,
    required List<String>? roles,
    required List<Education>? educations,
    required String? imageProfile,
  }):super(
    idEmployees: idEmployees,
    employeeId: employeeId,
    titleTh: titleTh,
    firstnameTh: firstnameTh,
    lastnameTh: lastnameTh,
    nicknameTh: nicknameTh,
    titleEn: titleEn,
    hiringDate : hiringDate,
    personalId: personalId,
    email: email,
    telephoneMobile: telephoneMobile,
    positionName: positionName,
    sectionName: sectionName,
    departmentName: departmentName,
    divisionName: divisionName,
    address: address,
    houseNo: houseNo,
    village: village,
    villageNo: villageNo,
    alley: alley,
    road: road,
    subDistrict: subDistrict,
    district: district,
    provience: provience,
    areaCode: areaCode,
    companyName: companyName,
    firstnameEn: firstnameEn,
    lastnameEn: lastnameEn,
    nicknameEn: nicknameEn,
    idRole: idRole,
    isActive: isActive,
    createDate: createDate,
    createBy: createBy,
    idPaymentType: idPaymentType,
    idCompany: idCompany,
    imageName: imageName,
    servY: servY,
    servM: servM,
    userPf: userPf,
    taxId: taxId,
    maritalStatus: maritalStatus,
    idManagerLv1: idManagerLv1,
    managerLv1FirstnameTh: managerLv1FirstnameTh,
    managerLv1LastnameTh: managerLv1LastnameTh,
    managerLv1FirstnameEn: managerLv1FirstnameEn,
    managerLv1LastnameEn: managerLv1LastnameEn,
    managerLv1Email: managerLv1Email,
    idManagerLv2: idManagerLv2,
    managerLv2FirstnameTh: managerLv2FirstnameTh,
    managerLv2LastnameTh: managerLv2LastnameTh,
    managerLv2FirstnameEn: managerLv2FirstnameEn,
    managerLv2LastnameEn: managerLv2LastnameEn,
    managerLv2Email: managerLv2Email,
    managerLv1PositionName: managerLv1PositionName,
    managerLv2PositionName: managerLv2PositionName,
    emergencyContact: emergencyContact,
    emergencyRelationship: emergencyRelationship,
    emergencyPhone: emergencyPhone,
    birthday: birthday,
    workingType: workingType,
    updateDate: updateDate,
    updateBy: updateBy,
    roleName: roleName,
    roles: roles,
    educations: educations,
    imageProfile: imageProfile,
  );

  factory AllProfileModel.fromJson(Map<String, dynamic> json) => AllProfileModel(
    idEmployees: json["idEmployees"],
    employeeId: json["employeeID"],
    titleTh: json["title_TH"],
    firstnameTh: json["firstname_TH"],
    lastnameTh: json["lastname_TH"],
    nicknameTh: json["nickname_TH"],
    titleEn: json["title_EN"],
    hiringDate: json["hiringDate"] == null ? null : DateTime.parse(json["hiringDate"]),
    personalId: json["personalID"],
    email: json["email"],
    telephoneMobile: json["telephoneMobile"],
    positionName: json["positionName"],
    sectionName: json["sectionName"],
    departmentName: json["departmentName"],
    divisionName: json["divisionName"],
    address: json["address"],
    houseNo: json["houseNo"],
    village: json["village"],
    villageNo: json["villageNo"],
    alley: json["alley"],
    road: json["road"],
    subDistrict: json["subDistrict"],
    district: json["district"],
    provience: json["provience"],
    areaCode: json["areaCode"],
    companyName: json["companyName"],
    firstnameEn: json["firstname_EN"],
    lastnameEn: json["lastname_EN"],
    nicknameEn: json["nickname_EN"],
    idRole: json["idRole"],
    isActive: json["isActive"],
    createDate: json["createDate"] == null ? null : DateTime.parse(json["createDate"]),
    createBy: json["createBy"],
    idPaymentType: json["idPaymentType"],
    idCompany: json["idCompany"],
    imageName: json["imageName"],
    servY: json["Serv_Y"],
    servM: json["Serv_M"],
    userPf: json["userPF"],
    taxId: json["taxID"],
    maritalStatus: json["maritalStatus"],
    idManagerLv1: json["idManagerLV1"],
    managerLv1FirstnameTh: json["managerLV1_firstname_TH"],
    managerLv1LastnameTh: json["managerLV1_lastname_TH"],
    managerLv1FirstnameEn: json["managerLV1_firstname_EN"],
    managerLv1LastnameEn: json["managerLV1_lastname_EN"],
    managerLv1Email: json["managerLV1_email"],
    idManagerLv2: json["idManagerLV2"],
    managerLv2FirstnameTh: json["managerLV2_firstname_TH"],
    managerLv2LastnameTh: json["managerLV2_lastname_TH"],
    managerLv2FirstnameEn: json["managerLV2_firstname_EN"],
    managerLv2LastnameEn: json["managerLV2_lastname_EN"],
    managerLv2Email: json["managerLV2_email"],
    managerLv1PositionName: json["managerLV1_positionName"],
    managerLv2PositionName: json["managerLV2_positionName"],
    emergencyContact: json["emergencyContact"],
    emergencyRelationship: json["emergencyRelationship"],
    emergencyPhone: json["emergencyPhone"],
    birthday: json["birthday"] == null ? null : DateTime.parse(json["birthday"]),
    workingType: json["workingType"],
    updateDate: json["updateDate"] == null ? null : DateTime.parse(json["updateDate"]),
    updateBy: json["updateBy"],
    roleName: json["roleName"],
    roles: json["roles"] == null ? [] : List<String>.from(json["roles"]!.map((x) => x)),
    educations: json["educations"] == null ? [] : List<EducationModel>.from(json["educations"]!.map((x) => EducationModel.fromJson(x))),
    imageProfile: json["imageProfile"],
  );

  Map<String, dynamic> toJson() => {
    "idEmployees": idEmployees,
    "employeeID": employeeId,
    "title_TH": titleTh,
    "firstname_TH": firstnameTh,
    "lastname_TH": lastnameTh,
    "nickname_TH": nicknameTh,
    "title_EN": titleEn,
    "hiringDate": hiringDate?.toIso8601String(),
    "personalID": personalId,
    "email": email,
    "telephoneMobile": telephoneMobile,
    "positionName": positionName,
    "sectionName": sectionName,
    "departmentName": departmentName,
    "divisionName": divisionName,
    "address": address,
    "houseNo": houseNo,
    "village": village,
    "villageNo": villageNo,
    "alley": alley,
    "road": road,
    "subDistrict": subDistrict,
    "district": district,
    "provience": provience,
    "areaCode": areaCode,
    "companyName": companyName,
    "firstname_EN": firstnameEn,
    "lastname_EN": lastnameEn,
    "nickname_EN": nicknameEn,
    "idRole": idRole,
    "isActive": isActive,
    "createDate": createDate?.toIso8601String(),
    "createBy": createBy,
    "idPaymentType": idPaymentType,
    "idCompany": idCompany,
    "imageName": imageName,
    "Serv_Y": servY,
    "Serv_M": servM,
    "userPF": userPf,
    "taxID": taxId,
    "maritalStatus": maritalStatus,
    "idManagerLV1": idManagerLv1,
    "managerLV1_firstname_TH": managerLv1FirstnameTh,
    "managerLV1_lastname_TH": managerLv1LastnameTh,
    "managerLV1_firstname_EN": managerLv1FirstnameEn,
    "managerLV1_lastname_EN": managerLv1LastnameEn,
    "managerLV1_email": managerLv1Email,
    "idManagerLV2": idManagerLv2,
    "managerLV2_firstname_TH": managerLv2FirstnameTh,
    "managerLV2_lastname_TH": managerLv2LastnameTh,
    "managerLV2_firstname_EN": managerLv2FirstnameEn,
    "managerLV2_lastname_EN": managerLv2LastnameEn,
    "managerLV2_email": managerLv2Email,
    "managerLV1_positionName": managerLv1PositionName,
    "managerLV2_positionName": managerLv2PositionName,
    "emergencyContact": emergencyContact,
    "emergencyRelationship": emergencyRelationship,
    "emergencyPhone": emergencyPhone,
    "birthday": birthday?.toIso8601String(),
    "workingType": workingType,
    "updateDate": updateDate?.toIso8601String(),
    "updateBy": updateBy,
    "roleName": roleName,
    "roles": roles == null ? [] : List<dynamic>.from(roles!.map((x) => x)),
    "educations": educations == null ? [] : List<dynamic>.from(educations!.map((x) => x.toJson())),
    "imageProfile": imageProfile,
  };
}

class EducationModel extends Education{

  EducationModel({
    required int? idEducations,
    required String? degree,
    required String? university,
    required String? faculty,
    required String? major,
    required int? fromYear,
    required int? endYear,
    required String? gpa,
    required int? idEmployees,
  }):super(
    idEducations: idEducations,
    degree: degree,
    university: university,
    faculty: faculty,
    major: major,
    fromYear: fromYear,
    endYear: endYear,
    gpa: gpa,
    idEmployees: idEmployees,
  );

  factory EducationModel.fromJson(Map<String, dynamic> json) => EducationModel(
    idEducations: json["idEducations"],
    degree: json["degree"],
    university: json["university"],
    faculty: json["faculty"],
    major: json["major"],
    fromYear: json["fromYear"],
    endYear: json["endYear"],
    gpa: json["gpa"],
    idEmployees: json["idEmployees"],
  );

  Map<String, dynamic> toJson() => {
    "idEducations": idEducations,
    "degree": degree,
    "university": university,
    "faculty": faculty,
    "major": major,
    "fromYear": fromYear,
    "endYear": endYear,
    "gpa": gpa,
    "idEmployees": idEmployees,
  };
}