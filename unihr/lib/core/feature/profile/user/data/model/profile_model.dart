import 'dart:convert';
import '../../domain/entity/profile_entity.dart';

ProfileModel profileFromJson(String str) => ProfileModel.fromJson(json.decode(str));

String profileToJson(ProfileModel data) => json.encode(data.toJson());

class ProfileModel extends ProfileEntity{

  const ProfileModel({
    required int? idEmployee,
    required String? scgEmployeeId,
    required String? namePrefix,
    required String? firstName,
    required String? lastName,
    required String? positionId,
    required String? plEsop,
    required String? plGroup,
    required String? organizationId,
    required String? position,
    required String? section,
    required dynamic? division,
    required int? idDepartment,
    required String? companyCode,
    required String? location,
    required String? workingLocation,
    required String? employeeGroupCode,
    required String? employeeGroupText,
    required DateTime? birthDate,
    required DateTime? serviceDate,
    required DateTime? positionEntryDate,
    required DateTime? plDate,
    required int? outsideEquivalentServiceYear,
    required int? outsideEquivalentServiceMonth,
    required String? employeeTypeId,
    required String? reportToPersonnelNumber,
    required String? reportToName,
    required String? reportToPosition,
    required String? reportToEmail,
    required String? managerPersonnelNumber,
    required String? managerName,
    required String? managerPosition,
    required String? managerEmail,
    required String? gender,
    required dynamic? profile,
    required dynamic? experience,
    required dynamic? gap,
    required String? telephoneMobile,
    required String? emailAddressBusiness,
    required String? username,
    required int? idRole,
    required int? updateBy,
    required dynamic? updateAt,
    required List<PocketEntity>? wallet,
    required List<Education>? education,
    required String? image,
    required String? rating,
  }):super(
    idEmployee: idEmployee,
    scgEmployeeId: scgEmployeeId,
    namePrefix: namePrefix,
    firstName: firstName,
    lastName: lastName,
    positionId: positionId,
    plEsop: plEsop,
    plGroup: plGroup,
    organizationId: organizationId,
    position: position,
    section: section,
    division: division,
    idDepartment: idDepartment,
    companyCode: companyCode,
    location: location,
    workingLocation: workingLocation,
    employeeGroupCode: employeeGroupCode,
    employeeGroupText: employeeGroupText,
    birthDate: birthDate,
    serviceDate: serviceDate,
    positionEntryDate: positionEntryDate,
    plDate: plDate,
    outsideEquivalentServiceYear: outsideEquivalentServiceYear,
    outsideEquivalentServiceMonth: outsideEquivalentServiceMonth,
    employeeTypeId: employeeTypeId,
    reportToPersonnelNumber: reportToPersonnelNumber,
    reportToName: reportToName,
    reportToPosition: reportToPosition,
    reportToEmail: reportToEmail,
    managerPersonnelNumber: managerPersonnelNumber,
    managerName: managerName,
    managerPosition: managerPosition,
    managerEmail: managerEmail,
    gender: gender,
    profile: profile,
    experience: experience,
    gap: gap,
    telephoneMobile: telephoneMobile,
    emailAddressBusiness: emailAddressBusiness,
    username: username,
    idRole:idRole,
    updateBy: updateBy,
    updateAt: updateAt,
    image: image,
    wallet: wallet,
    education: education,
    rating: rating,
  );

  factory ProfileModel.fromJson(Map<String, dynamic> json) => ProfileModel(
    idEmployee: json["idEmployee"],
    scgEmployeeId: json["scgEmployeeId"],
    namePrefix: json["namePrefix"],
    firstName: json["firstName"],
    lastName: json["lastName"],
    positionId: json["positionId"],
    plEsop: json["plEsop"],
    plGroup: json["plGroup"],
    organizationId: json["organizationId"],
    position: json["position"],
    section: json["section"],
    division: json["division"],
    idDepartment: json["idDepartment"],
    companyCode: json["companyCode"],
    location: json["location"],
    workingLocation: json["workingLocation"],
    employeeGroupCode: json["employeeGroupCode"],
    employeeGroupText: json["employeeGroupText"],
    birthDate: json["birthDate"] == null ? null : DateTime.parse(json["birthDate"]),
    serviceDate: json["serviceDate"] == null ? null : DateTime.parse(json["serviceDate"]),
    positionEntryDate: json["positionEntryDate"] == null ? null : DateTime.parse(json["positionEntryDate"]),
    plDate: json["plDate"] == null ? null : DateTime.parse(json["plDate"]),
    outsideEquivalentServiceYear: json["outsideEquivalentServiceYear"],
    outsideEquivalentServiceMonth: json["outsideEquivalentServiceMonth"],
    employeeTypeId: json["employeeTypeId"],
    reportToPersonnelNumber: json["reportToPersonnelNumber"],
    reportToName: json["reportToName"],
    reportToPosition: json["reportToPosition"],
    reportToEmail: json["reportToEmail"],
    managerPersonnelNumber: json["managerPersonnelNumber"],
    managerName: json["managerName"],
    managerPosition: json["managerPosition"],
    managerEmail: json["managerEmail"],
    gender: json["gender"],
    profile: json["profile"],
    experience: json["experience"],
    gap: json["gap"],
    telephoneMobile: json["telephoneMobile"],
    emailAddressBusiness: json["emailAddressBusiness"],
    username: json["username"],
    idRole: json["idRole"],
    updateBy: json["updateBy"],
    updateAt: json["updateAt"],
    education: json["education"] == null ? [] : List<Education>.from(json["education"]!.map((x) => Education.fromJson(x))),
    wallet: json["wallet"] == null ? [] : List<PocketEntity>.from(json["wallet"]!.map((x) => PocketEntity.fromJson(x))),
    image: json["image"],
    rating: json['rating'],
  );

  Map<String, dynamic> toJson() => {
    "idEmployee": idEmployee,
    "scgEmployeeId": scgEmployeeId,
    "namePrefix": namePrefix,
    "firstName": firstName,
    "lastName": lastName,
    "positionID": positionId,
    "plESOP": plEsop,
    "plGroup": plGroup,
    "organizationID": organizationId,
    "position": position,
    "section":   section,
    "division": division,
    "idDepartment": idDepartment,
    "companyCode": companyCode,
    "location": location,
    "workingLocation": workingLocation,
    "employeeGroupCode": employeeGroupCode,
    "employeeGroupText": employeeGroupText,
    "birthDate": birthDate,
    "serviceDate": serviceDate,
    "positionEntryDate": positionEntryDate,
    "plDate": plDate,
    "outsideEquivalentServiceYear": outsideEquivalentServiceYear,
    "outsideEquivalentServiceMonth": outsideEquivalentServiceMonth,
    "employeeTypeId": employeeTypeId,
    "reportToPersonnelNumber": reportToPersonnelNumber,
    "reportToName": reportToName,
    "reportToPosition": reportToPosition,
    "reportToEmail": reportToEmail,
    "managerPersonnelNumber": managerPersonnelNumber,
    "managerName": managerName,
    "managerPosition": managerPosition,
    "managerEmail": managerEmail,
    "gender": gender,
    "profile": profile,
    "experience": experience,
    "gap": gap,
    "telephoneMobile": telephoneMobile,
    "emailAddressBusiness": emailAddressBusiness,
    "username": username,
    "idRole": idRole,
    "updateBy": updateBy,
    "update_at": updateAt,
    "wallet" : wallet == null ? [] : List<dynamic>.from(wallet!.map((x) => x.toJson())),
    "education": education,
    "image": image,
  };
}

class EducationModel extends Education{

  EducationModel({
    required int? idEducations,
    required String? degree,
    required String? university,
    required String? faculty,
    required String? major,
    required int? fromYear,
    required int? endYear,
    required String? gpa,
    required int? idEmployees,
  }):super(
    idEducations: idEducations,
    degree: degree,
    university: university,
    faculty: faculty,
    major: major,
    fromYear: fromYear,
    endYear: endYear,
    gpa: gpa,
    idEmployees: idEmployees,
  );
}

// class PocketModel extends ProfileEntity{
//   PocketModel({
//     required int? idCoinType,
//     required String? coinType,
//     required int? amount,
//   }):super(
//     idCoinType: idCoinType,
//     coinType: coinType,
//     amount: amount,
//   );
// }